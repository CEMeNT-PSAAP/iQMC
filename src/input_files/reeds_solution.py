#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 28 13:22:51 2022

@author: sampasmann
"""

import numpy as np

from scipy.integrate import quad

"""
Analytic solution to reeds problem. 

This version calculates the solution as the cell average.

Returns numpy array of size (Nx,1).
"""
def reeds_sol(Nx=80, LB=-8.0, RB=8.0):


    # =============================================================================
    # Reference solution
    # =============================================================================
    def phi1(x):
        return 1.0 - 5.96168047527760*10**(-47)*np.cosh(52.06761235859028*x) \
                   - 6.78355315350872*10**(-56)*np.cosh(62.76152118553390*x) \
                   - 7.20274049646598*10**(-84)*np.cosh(95.14161078659372*x) \
                   - 6.34541150517664*10**(-238)*np.cosh(272.5766481169758*x)
    def phi2(x):
        return   1.685808767651539*10**3*np.exp(-5.206761235859028*x) \
               + 3.143867366942945*10**4*np.exp(-6.276152118553390*x) \
               + 2.879977113018352*10**7*np.exp(-9.514161078659372*x) \
               + 8.594190506002560*10**22*np.exp(-27.25766481169758*x) \
               + 1.298426035202193*10**(-36)*np.exp(27.25766481169758*x) \
               + 1.432344656303454*10**(-13)*np.exp(9.514161078659372*x) \
               + 1.514562265056083*10**(-9)*np.exp(6.276152118553390*x) \
               + 1.594431209450755*10**(-8)*np.exp(5.206761235859028*x)
    
    def phi3(x):
        return 1.105109108062394
    
    def phi4(x):
        return 10.0 - 0.1983746883968300*np.exp(0.5254295183311557*x) \
                    - 7.824765332896027*10**(-5)*np.exp(1.108937229227813*x) \
                    - 9.746660212187006*10**(-6)*np.exp(1.615640334315550*x) \
                    - 2.895098351422132*10**(-13)*np.exp(4.554850586269065*x) \
                    - 75.34793864805979*np.exp(-0.5254295183311557*x ) \
                    - 20.42874998426011*np.exp(-1.108937229227813*x) \
                    - 7.129175418204712*10**(2)*np.exp(-1.615640334315550*x) \
                    - 2.716409367577795*10**(9)*np.exp(-4.554850586269065*x)
    
    def phi5(x):
        return 31.53212162577067*np.exp(-0.5254295183311557*x) \
                + 26.25911060454856*np.exp(-1.108937229227813*x) \
                + 1.841223066417334*10**(3)*np.exp(-1.615640334315550*x) \
                + 1.555593549394869*10**(11)*np.exp(-4.554850586269065*x) \
                - 3.119310353653182*10**(-3)*np.exp(0.5254295183311557*x) \
                - 6.336401143340483*10**(-7)*np.exp(1.108937229227813*x) \
                - 3.528757679361232*10**(-8)*np.exp(1.615640334315550*x) \
                - 4.405514335746888*10**(-18)*np.exp(4.554850586269065*x)

    def f_phi(x1, x2):
        midpoint = (x2+x1)*0.5
        x1 = abs(x1)
        x2 = abs(x2)
        dx = abs(x2 - x1)
        if (x1>x2):
            a = x2
            b = x1
        else:
            a = x1
            b = x2
        if (midpoint < -6.0):
            return quad(phi5, a, b)[0]/dx
        elif (-6.0 < midpoint < -5.0):
            return quad(phi4, a, b)[0]/dx
        elif (-5.0 < midpoint < -3.0): #vacuum region 1
            return quad(phi3, a, b)[0]/dx
        elif (-3.0 < midpoint < -2.0):
            return quad(phi2, a, b)[0]/dx
        elif (-2.0 < midpoint < 0.0):
            return quad(phi1, a, b)[0]/dx
        elif (0.0 < midpoint < 2.0):
            return quad(phi1, a, b)[0]/dx
        elif (2.0 < midpoint < 3.0):
            return quad(phi2, a, b)[0]/dx
        elif (3.0 < midpoint < 5.0): # vacuum region 2
            return quad(phi3, a, b)[0]/dx
        elif (5.0 < midpoint < 6.0):
            return quad(phi4, a, b)[0]/dx
        elif (6.0 < midpoint):
            return quad(phi5, a, b)[0]/dx

    
    phi_ref   = np.zeros(Nx)
    dx = (RB-LB)/Nx
    left_edges = np.linspace(LB,RB-dx,num=Nx)
    right_edges = left_edges+dx
    
    for i in range(Nx):
        phi_ref[i] = f_phi(left_edges[i],right_edges[i])
    phi_ref = np.reshape(phi_ref, (Nx,1))
    
    return phi_ref


def reeds_mcdc_sol():
    phi = np.array((
            0.277112,
            0.369584,
            0.459629,
            0.553771,
            0.655106,
            0.766274,
            0.891242,
            1.03549,
            1.21023,
            1.44999,
            1.80277,
            1.9498,
            1.93496,
            1.77525,
            1.42231,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            0.42455,
            0.0860493,
            0.0322824,
            0.0460123,
            0.197073,
            0.975099,
            1.00004,
            1.00000,
            0.999981,
            0.999943,
            1.00007,
            0.999982,
            0.999978,
            0.999966,
            0.999975,
            0.999975,
            0.999966,
            0.999978,
            0.999982,
            1.00007,
            0.999943,
            0.999981,
            1.00000,
            1.00004,
            0.975099,
            0.197073,
            0.0460123,
            0.0322824,
            0.0860493,
            0.42455,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.10586,
            1.42231,
            1.77525,
            1.93496,
            1.9498,
            1.80277,
            1.44999,
            1.21023,
            1.03549,
            0.891242,
            0.766274,
            0.655106,
            0.553771,
            0.459629,
            0.369584,
            0.277112,
            ))
    phi = np.reshape(phi,(80,1))
    return phi


def reeds_julia_sol():
    phi = np.array((
     0.27986536455910394,
     0.3765206188132753, 
     0.4596662705368542, 
     0.5593393553298678, 
     0.6751214332324625, 
     0.7714476083424695, 
     0.8984327824133488, 
     1.0446805225914058, 
     1.2084277330942068,
     1.4007375987393453, 
     1.7873633212820639, 
     2.0449114975334806, 
     1.8740015685108018, 
     1.7350526283512273, 
     1.4366009004869142, 
     1.0852212737659594, 
     1.0852212737659594, 
     1.0852212737659652, 
     1.0852212737659594, 
     1.0852212737659594, 
     1.0852212737659594, 
     1.0852212737659623, 
     1.0852212737659594, 
     1.0852212737659623, 
     1.0852212737659594, 
     0.4277465278453554, 
     0.08554561864681408, 
     0.033261226250506676, 
     0.04269882291606526, 
     0.12085074122107903, 
     0.9709053729790915, 
     0.9983919031503921, 
     1.006722702179199, 
     0.9972823455303907, 
     1.007975891264724,
     0.9835991416836114, 
     1.0023950042947363, 
     0.9966031485214148, 
     1.002044917437595, 
     1.0155509007927472, 
     0.9841249046248989, 
     1.0199090473241559, 
     0.995565154058441, 
     0.9977851364217488, 
     1.001233322646037, 
     0.9953303376638702, 1.0026724443714912, 0.9937494781523336, 0.9995283195147069, 0.9716447724239404, 0.31754198980197323, 0.06831495757644947, 0.03622099669760947, 0.08607143914304709, 0.42403979498633787, 1.1494477423783693, 1.1494477423783716, 1.1494477423783693, 1.1494477423783716, 1.1494477423783693, 1.1494477423783693, 1.1494477423783693, 1.1494477423783744, 1.1494477423783693, 1.1494477423783693, 1.3145569541275433, 1.7892834931819963, 2.0226497240191694, 1.8054435028349116, 1.8237185414969785, 1.4771335716277851, 1.1941849236788824, 1.0427991293715588, 0.9212826643031301, 0.7779309293047235, 0.6498831308260048, 0.5495871134344887, 0.46302260017074975, 0.3714808276900119, 0.27756036476772794))
    phi = np.reshape(phi,(80,1))
    return phi

if (__name__ == "__main__"):
    import matplotlib.pyplot as plt
    Nx  = 80
    sol = reeds_sol(Nx=Nx)
    mcdc = reeds_mcdc_sol()
    julia = reeds_julia_sol()
    plt.plot(range(Nx),sol)
    plt.plot(range(Nx),mcdc)
    plt.plot(range(Nx),julia)
    

